swagger: '2.0'
info:
  title: Tarbela Event Producer API
  description: |
      This API will be used by Tarbela to access events from a producer, which
      need to be published to Nakadi (or maybe to other event message sinks).
      After delivery Tarbela will use the status_update links to inform the producers
      about the success (or the failure).
      
      Here is a sketch of the architecture:
      
            Producer  ←––– this REST API ←–––– Tarbela  –––––––→ Nakadi
           (stateful)                        (publisher,         (stateful
                                              stateless)         message queue)
      
  version: '0.2'
  contact:
      name: Zalando Tech, Team Lumberjack + Tarbela Contributors
      url: https://github.com/zalando/tarbela
      email: team-lumberjack@zalando.de

paths: 
  /new-events:
    parameters:
      - $ref: '#/parameters/Flow-Id'
    get:
      summary: retrieve a bunch of new events
      description:
        Retrieve some of the new events. The response will support pagination by a `next` link,
        using a cursor, assuming there are actually more events.
      parameters:
        - name: cursor
          in: query
          required: false
          type: string
          description:
            A cursor for pagination. Usually this parameter will only be set in the `next` links
            from responses to this service. Tarbela will not invent any cursors.
        - name: limit
          in: query
          required: false
          type: integer
          description:
            How many new events will be returned at most.
            The producer can decide to support a lower limit, and will impose
            a sensible default value if this parameter is missing. (Of course,
            the producer will never return more events than are actually available.)  
      responses:
        '200':
          description: Retrieval was successful.
          headers:
            Link:
              type: string
              description: |
                Links to related resources, in the format defined by
                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).
                This will include a link with relation type `next` to the
                next page, if there is a next page.
          schema:
            $ref: '#/definitions/Bunch-of-Events'
        '400':
          description: invalid request, e.g. cursor or limit parameters are invalid
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Service not available.
          schema:
            $ref: '#/definitions/Problem'
        # other 4xx/5xx responses are possible too.

  /events/{eid}/status:
    parameters:
      - $ref: '#/parameters/Flow-Id'
      - name: eid
        in: path
        type: string
        description:
          the event identifier. (Tarbela will not fill this manually, but take
          the link from the /new-events response.)
        required: true
    post:
      summary: update the status of the event delivery.
      description:
        This informs the producer about the status of the event delivery.
        In the case of SENT, the producer will remove the event from the
        list of events available via '/new-events', as it is already sent
        to any consumers.
        In the case or ERROR, the producer might still let the event in the
        queue, so it can be tried again later. 
      parameters:
        - name: update
          in: body
          schema:
            type: object
            properties:
              status:
                type: string
                enum:
                  - SENT
                  - ERROR
              delivery_error:
                $ref: '#/definitions/Problem'
      responses:
        '200':
          description: OK, update was done. 
        '400':
          description: invalid request, e.g. invalid body object.
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description:
            There is no event with this eid. (This should usually not happen
            if the link was followed from /new-events response.)
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Internal server error.
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Service not available.
          schema:
            $ref: '#/definitions/Problem'
        # other 4xx/5xx responses are possible too.

parameters:
  Flow-Id:
    name: X-Flow-ID
    description: |
      A custom header that will be used for logging, and passed onto any further requests and can be used for diagnosing.
    in: header
    type: string
    required: false
  
definitions:
  Bunch-of-Events:
    type: object
    properties:
      _links:
        type: object
        properties:
          next:
            type: object
            properties:
              href:
                description:
                  A link to the next page of event items. This is in the form of a URI
                  reference, and will be resolved by Tarbela using GET.
                type: string
                format: uri
                x-interfaces:
                  - $ref: '#/paths/~1new-events'
      events:
        type: array
        items:
          $ref: "#/definitions/Event"
  Event:
    description:
      An event which will be delivered to Nakadi. For a data change event
      the data_type and data_op fields are required too, for business events
      not.
    type: object
    properties:
      _links:
        type: object
        required:
          - status_update
        properties:
          status_update:
            type: object
            required:
              - href
            properties:
              href:
                type: string
                format: uri
                description:
                  Tarbela will use this URI with a POST to send the status update.
                x-interfaces:
                  - $ref: '#/paths/~1events~1{eid}~1status'
      data:
        description: |
          The JSON data payload to be sent to Nakadi.
        type: object
      metadata:
        description:
          Meta data about this event. Most of it will be simply passed forward to Nakadi,
          though the `event_type` field will be used to decide the submission URI. 
        type: object
        properties:
          eid:
            description: |
              Identifier of this Event.
              Clients MUST generate this value and it SHOULD be guaranteed to be unique from the
              perspective of the producer. Consumers MIGHT use this value to assert uniqueness of reception
              of the Event.
            type: string
            example: '105a76d8-db49-4144-ace7-e683e8f4ba46'
          event_type:
            description: |
              The EventType of this Event. This will decide which Nakadi topic this event will be sent to.
            type: string
            example: 'pennybags.payment-business-event'
          occurred_at:
            description: |
              Timestamp of creation of the Event generated by the producer.
            type: string
            format: date-time
            example: '1996-12-19T16:39:57-08:00'
          parent_eids:
            type: array
            items:
              type: string
              format: uuid
            description: |
              Event identifier of the Event that caused the generation of this Event.
              Set by the producer.
            example: '105a76d8-db49-4144-ace7-e683e8f4ba46'
          flow_id:
            description: |
              The flow-id of the producer of this Event.
            type: string
            example: 'JAh6xH4OQhCJ9PutIV_RYw'
          partition:
            description: |
              Indicates the partition assigned to this Event.
              Required to be set by the client if partition strategy of the EventType is 'user_defined'.
            type: string
            example: '0'
        required:
          - eid
          - occurred_at
          - event_type
        additionalProperties: false
      data_type:
        type: string
        example: 'pennybags:order'
      data_op:
        type: string
        enum: ['C', 'U', 'D', 'S']
        description: |
          The type of operation executed on the entity.
          * C: Creation
          * U: Update
          * D: Deletion
          * S: Snapshot

    required:
      - metadata
      - data
      - _links
      
  Problem:
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the problem type.  When dereferenced,
          it SHOULD provide human-readable documentation for the problem type
          (e.g., using HTML).
        example: http://httpstatus.es/503
      title:
        type: string
        description: |
          A short, summary of the problem type. Written in english and readable
          for engineers (usually not suited for non technical stakeholders and
          not localized); example: Service Unavailable
      status:
        type: integer
        format: int32
        description: |
          The HTTP status code generated by the origin server for this occurrence
          of the problem.
        example: 503
      detail:
        type: string
        description: |
          A human readable explanation specific to this occurrence of the
          problem.
        example: Connection to database timed out
      instance:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the specific occurrence of the problem.
          It may or may not yield further information if dereferenced.
    required:
      - type
      - title
      - status
