swagger: '2.0'
info:
  title: Tarbela Event Producer API
  description: |
      This API will be used by Tarbela to access events from a producer, which
      need to be published to Nakadi (or maybe to other event message sinks).
      After delivery Tarbela will use the status_update links to inform the
      producers about the success (or the failure).
      
      Here is a sketch of the architecture:
      
            Producer  ←––– this REST API ←–––– Tarbela  –––––––→ Nakadi
           (stateful)                        (publisher,         (stateful
                                              stateless)         message queue)
      
  version: '0.2'
  contact:
      name: Zalando Tech, Team Lumberjack + Tarbela Contributors
      url: https://github.com/zalando/tarbela
      email: team-lumberjack@zalando.de

paths: 
  /events:
    parameters:
      - $ref: '#/parameters/Flow-Id'
    get:
      summary: retrieve a bunch of new events
      description:
        Retrieve some of the new events. The response will support pagination
        by a `next` link, using a cursor, assuming there are actually more
        events.
      parameters:
        - name: cursor
          in: query
          required: false
          type: string
          description:
            A cursor for pagination. Usually this parameter will only be set
            in the `next` links from responses to this service. Tarbela will
            follow this links, but not impose any other meaning into this
            parameter.
        - name: status
          in: query
          required: false
          type: string
          description:
            If used, filters the retrieved events by status.
        - name: limit
          in: query
          required: false
          type: integer
          description:
            How many events will be returned at most.
            The producer can decide to support a lower limit, and will impose
            a sensible default value if this parameter is missing. (Of course,
            the producer will never return more events than are actually
            available.)
      responses:
        '200':
          description: Retrieval was successful.
          schema:
            $ref: '#/definitions/Bunch-of-Events'
        '400':
          description:
            invalid request, e.g. cursor or limit parameters are invalid,
            or unknown status
          schema:
            $ref: '#/definitions/Problem'
        # other 4xx/5xx responses are possible too.
    patch:
      parameters:
        - in: body
          name: update
          schema:
            $ref: "#/definitions/Bunch-of-EventUpdates"
          required: true
      description:
        Updates the publishing statuses of some events. This is used to inform
        the producer when a event was successfully delivered to the event sink
        or when it couldn't be delivered.
      responses:
        '200':
          description: OK, update was done. 
        '400':
          description: invalid request, e.g. invalid body object.
          schema:
            $ref: '#/definitions/Problem'
        # other 4xx/5xx responses are possible too.

parameters:
  Flow-Id:
    name: X-Flow-ID
    description: |
      A custom header that will be used for logging, and passed onto any
      further requests and can be used for diagnosing.
    in: header
    type: string
    required: false
  
definitions:
  DeliveryStatus:
    type: string
    description: |
      The delivery status of an event. (TODO: The possible values are still
      under discussion.)

  Bunch-of-Events:
    type: object
    properties:
      _links:
        type: object
        properties:
          next:
            type: object
            properties:
              href:
                description:
                  A link to the next page of event items (using the same
                  filtering as this one). This is in the form of a URI
                  reference, and will be resolved by Tarbela using GET.
                type: string
                format: uri
                x-interfaces:
                  - $ref: '#/paths/~1events'
      events:
        type: array
        items:
          $ref: "#/definitions/Event"
  Event:
    description:
      An event which will be delivered to Nakadi (or other event sinks),
      together with some metadata used by Tarbela.
    type: object
    properties:
      event_id:
        type: string
        description:
          An identifier for the event, for identification use between Tarbela
          and the producer. This identifier should uniquely identify the event
          inside the producer.
      delivery_status:
        $ref: '#/definitions/DeliveryStatus'
      event_payload:
        type: object
        description:
          The actual event to be sent to Nakadi or other event sinks, in the
          format recognized by this sink. Tarbela will not modify this object,
          but simply send it as-is.
        additionalProperties: {}
      channel_v1:
        description: |
          The channel identifier, consisting of a protocol and an submission
          URI. (TODO: This is one of the possible variants. See channel_v2 for
          the other one.)
        type: object
        properties:
          protocol:
            description:
              The type of event sink where this event should be sent to.
              Initially the only supported value is `nakadi` (for the Nakadi
              event bus system available at https://github.com/zalando/nakadi/),
              later other types of event sinks might be supported.
            type: string
            example: nakadi
          submission_uri:
            type: string
            description:
              The submission URI of event sink. The event will be sent there,
              maybe together with other events of the same protocol + submission
              URI combination (depending on the protocol).
      channel_v2:
        description: |
          The channel identifier, consisting of a sink identifier and a topic
          name. (TODO: This is one of the possible variants. See channel_v1
          for the other one.)
        type: object
        properties:
          sink_identifier:
            type: string
            description:
              An identifier for the event sink. This identifier needs to be
              configured in Tarbela's configuration.
          topic_name:
            type: string
            description:
              The name of the topic/channel/event type/... in the event sink.
              For Nakadi, this is the "event type".

  Bunch-of-EventUpdates:
    type: object
    properties:
      events:
        type: array
        items:
          $ref: "#/definitions/EventUpdate"

  EventUpdate:
    description:
      An update to a single event, to be written back to the producer.
      Tarbela can only update the publishing status of an event.
    type: object
    properties:
      event_id:
        type: string
        description:
          An identifier for this event. This will be taken from the same-named
          field in TarbelaEvent.
      delivery_status:
        $ref: '#/definitions/DeliveryStatus'
      
  Problem:
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the problem type.  When dereferenced,
          it SHOULD provide human-readable documentation for the problem type
          (e.g., using HTML).
        example: http://httpstatus.es/503
      title:
        type: string
        description: |
          A short, summary of the problem type. Written in english and readable
          for engineers (usually not suited for non technical stakeholders and
          not localized); example: Service Unavailable
      status:
        type: integer
        format: int32
        description: |
          The HTTP status code generated by the origin server for this occurrence
          of the problem.
        example: 503
      detail:
        type: string
        description: |
          A human readable explanation specific to this occurrence of the
          problem.
        example: Connection to database timed out
      instance:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the specific occurrence of the problem.
          It may or may not yield further information if dereferenced.
    required:
      - type
      - title
      - status
